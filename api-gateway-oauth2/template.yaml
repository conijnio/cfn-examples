Parameters:

  Version:
    Description: Version identifier for the deployment
    Type: String

  ResourceServerIdentifier:
    Description: The identifier used for the resource server
    Type: String

  CognitoDomain:
    Description: Domain name used for the Cognito user pool
    Type: String

Outputs:
  ApiId:
    Value: !Ref MyApi

  ApiEndpoint:
    Value: !Sub https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/v1

  CognitoEndpoint:
    Value: !Sub https://${CognitoDomain}.auth.${AWS::Region}.amazoncognito.com

  ClientId:
    Value: !GetAtt MyClient.ClientId

Resources:

#      ___      __    __  .___________. __    __
#     /   \    |  |  |  | |           ||  |  |  |
#    /  ^  \   |  |  |  | `---|  |----`|  |__|  |
#   /  /_\  \  |  |  |  |     |  |     |   __   |
#  /  _____  \ |  `--'  |     |  |     |  |  |  |
# /__/     \__\ \______/      |__|     |__|  |__|

  MyCognito:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyPool

  UserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain 
    Properties:
      UserPoolId: !Ref MyCognito 
      Domain: !Ref CognitoDomain

  MyClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: [ProductsResourceServer]
    Properties:
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - !Sub ${ResourceServerIdentifier}/read
        - !Sub ${ResourceServerIdentifier}/write
      ClientName: MyClient
      EnableTokenRevocation: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      UserPoolId: !Ref MyCognito

  ProductsResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: !Ref ResourceServerIdentifier
      Name: Product Server
      Scopes:
        - ScopeDescription: Read Access
          ScopeName: read
        - ScopeDescription: Write Access
          ScopeName: write
      UserPoolId: !Ref MyCognito

#       ___      .______    __
#      /   \     |   _  \  |  |
#     /  ^  \    |  |_)  | |  |
#    /  /_\  \   |   ___/  |  |
#   /  _____  \  |  |      |  |
#  /__/     \__\ | _|      |__|

  MyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApi
      EndpointConfiguration:
        Types: [REGIONAL]
  MyApiDocumentation:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      RestApiId: !Ref MyApi
      Location:
        Type: API
      Properties: !Sub >-
        {
          "info": {
            "title":"MyApi",
            "version":"${Version}",
            "description":"Example API that uses read/write scopes (Doc)"
          },
          "tags": [
            {
              "name":"products",
              "description":"List products that are available (Doc)"
            }
          ]
        }

  MyAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: MyAuthorizer
      RestApiId: !Ref MyApi
      ProviderARNs: [ !GetAtt MyCognito.Arn ]
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization

  ApiDocumentationVersion:
    Type: AWS::ApiGateway::DocumentationVersion
    DependsOn:
      - MyApiDocumentation
      - ApiInfoModelDocumentation
      - ProductModelDocumentation
      - ListProductsModelDocumentation
      - MyRootMethodGetMethodDocumentation
      - ProductsResourceDocumentation
      - ProductsGetMethodDocumentation
      - ProductsPostMethodDocumentation
    Properties:
      Description: My API
      DocumentationVersion: !Ref Version
      RestApiId: !Ref MyApi

  RequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: RequestValidator
      RestApiId: !Ref MyApi
      ValidateRequestBody: true
      ValidateRequestParameters: true

  ApiStage:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - ApiDocumentationVersion
    Properties:
      DeploymentId: !Ref MyDeployment
      DocumentationVersion: !Ref Version
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
          ResourcePath: /*
      RestApiId: !Ref MyApi
      StageName: v1
      TracingEnabled: true

  MyDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MyApi
    DependsOn:
      - ApiDocumentationVersion
      - MyRootMethod
      - ProductsGetMethod
      - ProductsPostMethod

# .___  ___.   ______    _______   _______  __          _______.
# |   \/   |  /  __  \  |       \ |   ____||  |        /       |
# |  \  /  | |  |  |  | |  .--.  ||  |__   |  |       |   (----`
# |  |\/|  | |  |  |  | |  |  |  ||   __|  |  |        \   \
# |  |  |  | |  `--'  | |  '--'  ||  |____ |  `----.----)   |
# |__|  |__|  \______/  |_______/ |_______||_______|_______/

  ApiInfoModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: The ApiInfoModel is an example model (Model)
      Name: ApiInfo
      RestApiId: !Ref MyApi
      Schema:
        type: object
        properties:
          name:
            type: string
            description: The name of the API (Model)
          version:
            type: string
            description: The version of the API (Model)
  ApiInfoModelDocumentation:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      RestApiId: !Ref MyApi
      Location:
        Name: ApiInfo
        Type: MODEL
      Properties: >-
        {
          "title":"ApiInfo",
          "description":"Response model for the hello endpoint (Doc)",
          "schema": {
            "properties": {
              "name": {
                "description": "The name of the API (Doc)"
              },
              "version": {
                "description": "The version of the API (Doc)"
              }
            }
          }
        }

  ProductModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: The MyModel is an example model (Model)
      Name: Product
      RestApiId: !Ref MyApi
      Schema:
        type: object
        properties:
          name:
            type: string
            description: Name of the product (Model)
          description:
            type: string
            description: Description of the product (Model)
  ProductModelDocumentation:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      RestApiId: !Ref MyApi
      Location:
        Name: Product
        Type: MODEL
      Properties: >-
        {
          "title":"Product",
          "description":"Response model for the hello endpoint (Doc)",
          "schema": {
            "properties": {
              "name": {
                "description": "The name of the product (Doc)"
              },
              "description": {
                "description": "The description of the product (Doc)"
              }
            }
          }
        }

  ListProductsModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: The MyModel is an example model (Model)
      Name: ListProducts
      RestApiId: !Ref MyApi
      Schema:
        type: object
        properties:
          timestamp:
            type: string
            description: The timestamp of the context of the API call (Model)
          requestId:
            type: string
            description: The requestId of the context of the API call (Model)
          products:
            type: array
            description: List of available products (Model)
            items:
              $ref: !Sub "https://apigateway.amazonaws.com/restapis/${MyApi.RestApiId}/models/${ProductModel}"

  ListProductsModelDocumentation:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      RestApiId: !Ref MyApi
      Location:
        Name: ListProducts
        Type: MODEL
      Properties: >-
        {
          "title":"ListProducts",
          "description":"Response model for the hello endpoint (Doc)",
          "schema": {
            "properties": {
              "timestamp": {
                "description": "The timestamp of the context of the API call (Doc)"
              },
              "requestId": {
                "description": "The requestId of the context of the API call (Doc)"
              },
              "products": {
                "description": "List of available products (Doc)"
              }
            }
          }
        }

  # .______        ______     ______   .___________.
  # |   _  \      /  __  \   /  __  \  |           |
  # |  |_)  |    |  |  |  | |  |  |  | `---|  |----`
  # |      /     |  |  |  | |  |  |  |     |  |
  # |  |\  \----.|  `--'  | |  `--'  |     |  |
  # | _| `._____| \______/   \______/      |__|

  MyRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: info
      RestApiId: !Ref MyApi
      ResourceId: !GetAtt MyApi.RootResourceId
      AuthorizerId: !Ref MyAuthorizer
      AuthorizationType: COGNITO_USER_POOLS
      HttpMethod: GET
      AuthorizationScopes:
        - !Sub ${ResourceServerIdentifier}/read
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: !Sub |
                {
                  "name": "MyApi",
                  "version": "${Version}",
                }
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: !Ref ApiInfoModel
  MyRootMethodGetMethodDocumentation:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      RestApiId: !Ref MyApi
      Location:
        Type: METHOD
        Path: /
        Method: GET
      Properties: >-
        {
          "tags": [],
          "summary": "API endpoint (Doc)",
          "description": "Returns info about the API (Doc)",
          "operationId": "info",
          "responses": {
            "200": {
              "description": "Successful operation (Doc)",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ApiInfoModel" }
                }
              }
            }
          }
        }

# .______   .______        ______    _______   __    __    ______ .___________.    _______.
# |   _  \  |   _  \      /  __  \  |       \ |  |  |  |  /      ||           |   /       |
# |  |_)  | |  |_)  |    |  |  |  | |  .--.  ||  |  |  | |  ,----'`---|  |----`  |   (----`
# |   ___/  |      /     |  |  |  | |  |  |  ||  |  |  | |  |         |  |        \   \
# |  |      |  |\  \----.|  `--'  | |  '--'  ||  `--'  | |  `----.    |  |    .----)   |
# | _|      | _| `._____| \______/  |_______/  \______/   \______|    |__|    |_______/

  ProductsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApi
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: products
  ProductsResourceDocumentation:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      RestApiId: !Ref MyApi
      Location:
        Path: /products
        Type: RESOURCE
      Properties: >-
        {
          "summary": "Products endpoint (Doc)",
          "description": "Endpoint to retrieve and/or store information about products (Doc)"
        }

  ProductsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: listProducts
      RestApiId: !Ref MyApi
      ResourceId: !Ref ProductsResource
      AuthorizerId: !Ref MyAuthorizer
      AuthorizationType: COGNITO_USER_POOLS
      HttpMethod: GET
      AuthorizationScopes:
        - !Sub ${ResourceServerIdentifier}/read
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {
                  "timestamp": "$context.requestTime",
                  "requestId": "$context.requestId",
                  "products": [
                    {"name": "Product 1", "description": "My first product"},
                    {"name": "Product 2", "description": "My second product"},
                  ],
                }
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: !Ref ListProductsModel
  ProductsGetMethodDocumentation:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      RestApiId: !Ref MyApi
      Location:
        Type: METHOD
        Path: /products
        Method: GET
      Properties: >-
        {
          "tags": ["products"],
          "summary": "List products (Doc)",
          "description": "Returns a list of products (Doc)",
          "operationId": "listProducts",
          "responses": {
            "200": {
              "description": "Successful operation (Doc)",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/ListProducts" }
                }
              }
            }
          }
        }

  ProductsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: createProducts
      RestApiId: !Ref MyApi
      ResourceId: !Ref ProductsResource
      AuthorizerId: !Ref MyAuthorizer
      AuthorizationType: COGNITO_USER_POOLS
      HttpMethod: POST
      RequestValidatorId: !Ref RequestValidator
      AuthorizationScopes:
        - !Sub ${ResourceServerIdentifier}/write
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {
                  "name": "Name of the product",
                  "description": "description of the product"
                }
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      RequestModels:
        application/json: !Ref ProductModel
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: !Ref ProductModel
  ProductsPostMethodDocumentation:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      RestApiId: !Ref MyApi
      Location:
        Type: METHOD
        Path: /products
        Method: POST
      Properties: >-
        {
          "tags": ["products"],
          "summary": "Create products (Doc)",
          "description": "Create a product (Doc)",
          "operationId": "createProducts",
          "responses": {
            "200": {
              "description": "Successful operation (Doc)",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Product" }
                }
              }
            }
          }
        }
